Завдання 1
//Увести з клавіатури рядок алфавітних, цифрових і символів знаків арифметичних дій. Передбачити меню для виконання таких дій:
//1. з рядка видалити всі алфавітні символи, залишивши усі цифрові та знакові '+', '-', '*', '/' символи;
//2. перевести цифрові символи у числові типи та вивести числа на екран.Числа можуть бути n - значними, якщо декілька цифрових символів йдуть поспіль;
//3. над отриманими числами виконати арифметичні дії відповідно до операцій, заданих символами '+', '-', '*', '/' в порядку їх розташування в рядку.
//У випадку, якщо кількість отриманих чисел менша за кількість арифметичних операцій, виділених з рядка, додавати та віднімати число 0, множити та ділити на 1;
//Вивести на екран усі перетворення рядка, результат у вигляді операндів та арифетичних операцій та результат арифметичного виразу.
#include <iostream>  //бібліотека введення-виведення
#include <string.h>  // бібліотека для роботи з рядками
#include <ctype.h>   // бібліотека для перевірки типів символів
#include <stdlib.h>  // бібліотека для функції atoi, яка перетворює рядок у ціле число
using namespace std;
const int maxLength = 50; //максимальна довжина рядка
char line[maxLength]; //масив введеного рядка
char nums[maxLength]; //масив рядка з цифрами та арифметичними операторами після видалення символів
char currentNumber[maxLength]; //тимчасовий масив для поточного числа під час конвертації
int numbers[maxLength]; //масив цілих чисел після конвертації
char operators[maxLength]; //масив операторів
int userChoice; //вибір користувача
// ========== ідентифікація автора та умови ==========
void identification()
{
	cout << "Student Olha Yezerska, gr SE-12 lab9 var4" << endl;
	cout << "Enter a string of alphabetic, numeric and arithmetic symbols from the keyboard." << endl;
	cout << "Provide a menu for performing the following actions :" << endl;
	cout << "1. remove all alphabetic characters from the string, leaving all numeric and symbolic '+', '-', '*', '/' characters;" << endl;
	cout << "2. convert digital symbols into numeric types and display numbers on the screen. Numbers can be n - significant if several digital symbols are consecutive;" << endl;
	cout << "3. perform arithmetic operations on the received numbers in accordance with the operations specified by the symbols '+', '-', '*', '/' in the order of their location in the line.";
	cout << "If the number of received numbers is less than the number of arithmetic operations selected from the line, add and subtract the number 0, multiply and divide by 1;" << endl;
	cout << "Display all string transformations, the result in the form of operands and arithmetic operations, and the result of an arithmetic expression." << endl;
	cout << "====================================================================================================================" << endl;
}
// =========== перевірка введення ==========
void checkInput(const char* text, bool& validInput)
{
	bool hasZeroDivision = false; //булева змінна ділення на нуль
	bool hasNumberOrOperator = false; //булева змінна наявності чисел чи операторів
	bool hasConsecutiveSymbols = false; //булева змінна наявності декількох символів підряд
	validInput = true; //коректність вводу
	for (int i = 0; text[i] != '\0'; i++) //доки коефіцієнт є нулем, немає нового рядка, коефіцієнт збільшується
	{
		if ((text[i] >= '0' && text[i] <= '9') || text[i] == '+' || text[i] == '-' || text[i] == '*' || text[i] == '/') //якщо є число або один з операторів
		{
			hasNumberOrOperator = true; //зміна булевої змінної на правду
		}
		if (text[i] == '/' && (i + 1 < strlen(text)) && text[i + 1] == '0') //якщо є ділення на нуль
		{
			hasZeroDivision = true; //зміна булевої змінної на правду
			break; //вихід
		}
	}
	if (!hasNumberOrOperator) //якщо немає цифр або операторів
	{
		cout << "Error: The line must contain numbers and arithmetic operators." << endl; //виведення повідомлення
		cout << "Please enter a valid expression." << endl; //виведення повідомлення
		validInput = false; //зміна булевої змінної на брехню
	}
	else if (hasZeroDivision) //якщо є ділення на нуль
	{
		cout << "Error: Division by zero detected!" << endl; //виведення повідомлення
		cout << "Please enter a valid expression." << endl; //виведення повідомлення
		validInput = false; //зміна булевої змінної на брехню
	}
	else //інакше
	{
		validInput = true; //зміна булевої змінної на правду
	}
}
// ========== введення рядка ==========
void input() 
{
	bool validInput = false; //булева змінна для контролю вводу
	while (!validInput) 
	{
		cout << "Enter the line: "; //виведення повідомлення
		cin.getline(line, maxLength); //внесення рядка і перевірка
		cin.clear(); //очищення потоку
		checkInput(line, validInput); //перевірка рядка
		if (validInput) //якщо введення коректне
		{
			cout << "Your line: " << line << endl; //виведення повідомлення та рядка
		}
	}
}
// ========== видалення непотрібних символів з рядка ==========
void removeSymbols()
{
	int length = strlen(line); //обчислення довжини рядка та ініціалізація змінної
	int index = 0; //ініціалізація індексу
	for (int i = 0; line[i] != '\0'; i++) //доки коефіцієнт є нулем, не є новим рядком і збільшується
	{
		if ((line[i] >= '0' && line[i] <= '9') || line[i] == '+' || line[i] == '-' || line[i] == '*' || line[i] == '/') //чи є символ цифрою або одним із операторів
		{
			nums[index++] = line[i]; //збереження у масив nums
		}
	}
	nums[index] = '\0'; //завершення масива nums символом кінця рядка
}
// ========== перетворення чисел з рядка символів у цілі числа ==========
void convertation()
{
	int length = strlen(nums); //обчислення довжини рядка та ініціалізація змінної
	int numberIndex = 0; //ініціалізація індексу
	int operatorIndex = 0; //ініціалізація індексу
	int numLen = 0; //ініціалізація довжини числа
	for (int i = 0; i <= length; ++i) //доки коефіцієнт є нулем, менший/дорівнює довжині та збільшується
	{
		if (isdigit(nums[i])) //якщо символ є цифрою
		{
			currentNumber[numLen++] = nums[i]; //внесення до масиву поточного числа
		}
		else if (nums[i] == '+' || nums[i] == '-' || nums[i] == '*' || nums[i] == '/' || nums[i] == '\0') //якзо символ є оператором
		{
			currentNumber[numLen] = '\0'; //закінчення рядку поточного числа
			numLen = 0; //обнулення довжини числа
			numbers[numberIndex++] = atoi(currentNumber); //переведення поточного число у ціле, запис його у масив чисел
			if (nums[i] != '\0') //якщо символ є оператором
			{
				operators[operatorIndex++] = nums[i]; //запис його у масив операторів
			}
		}
	}
}
// ========== арифметичні операції ==========
void operations()
{
	int numberCount = 0; //ініціалізація кількості чисел
	while (numbers[numberCount] != 0) //доки елемент масиву numbers за індексом numberCount не дорівнює 0
	{
		numberCount++; //збільшення лічильника
	}
	// Якщо чисел менше ніж операторів, додаємо числа за умовами
	int opCount = 0; //ініціалізація кількості операторів
	while (operators[opCount] != '\0')  //доки елемент масиву operators за індексом opCount не дорівнює новому рядку
	{
		opCount++; //збільшення лічильника
	}
	if (numberCount < opCount) //якщо кількість чисел менша за кількість операторів
	{
		for (int i = numberCount; i < opCount; i++) //доки коефіцієнт дорівнює кількості чисел, менший за кількість операторів і збільшується
		{
			numbers[i] = 0; // 0 для операцій + і -
		}
	}
	int result = numbers[0]; //початкове значення результату — перше число
	int numIndex = 1; //ініціалізація індексу
	for (int i = 0; operators[i] != '\0'; i++) //доки коефіцієнт є нулем, оператор не є новим рядком, коефіцієнт збільшується
	{
		switch (operators[i]) //у залежності від оператора
		{
		case '+': //якщо +
			result += numbers[numIndex++]; //додавання до результату наступного числа
			break; //вихід
		case '-': //якщо -
			result -= numbers[numIndex++]; //віднімання від результату наступного числа
			break; //вихід
		case '*': //якщо *
			if (numbers[numIndex] == 0) //якщо число нуль
			{
				result *= 1; //множення результату на нуль
			}
			else //інакше
			{
				result *= numbers[numIndex++]; //множення результату на наступне число
			}
			break; //вихід
		case '/': //якщо 
			if (numbers[numIndex] == 0) //якщо число нуль
			{
				result /= 1; //ділення результату на нуль
			}
			else //інакше
			{
				result /= numbers[numIndex++]; //ділення результату на наступне число
			}
			break;
		}
	}
	cout << "Final result: " << result << endl; //виведення повідомлення та результату
}
// =========== перевірка введення ============
int check()
{
	int value; //ініціалізація змінної
	bool invalidInput = false;
	while (!invalidInput) //доки цикл справджується
	{
		cin >> value; //внесення введення
		if (!cin || cin.peek() != '\n')  //якщо введення не є числом, менше за мінамальне або більше за максимальне значення, є дробовим
		{
			cout << "Invalid input. Try again: "; //виведення повідомлення про помилку і ще одну спробу
			cin.clear(); //очищення потоку введення
			cin.ignore(numeric_limits<streamsize>::max(), '\n'); //ігнорування залишків
		}
		else //якщо умова не справджується
		{
			invalidInput = true; //вихід із циклу
		}
	}
	return value; //повернення змінної
}
// ============ меню ============
void menu()
{
	//виведення меню
	cout << "====================================== Menu ======================================" << endl;
	cout << "1. Remove all alphabetic characters from the string." << endl;
	cout << "2. Convert digital symbols into numeric types and display numbers on the screen." << endl;
	cout << "3. Perform arithmetic operations and display the result." << endl;
	cout << "4. Exit" << endl;
	cout << "===================================================================================" << endl;
	bool removed = false; //булева змінна - брехня
	do
	{
		cout << "Chose the action:" << endl; //виведення повідомлення
		userChoice = check(); //перевірка введення
		switch (userChoice) //вибір варіанту і дії
		{
		case 1: //якщо вибір 1
			removeSymbols(); //виклик функції
			cout << "After removing symbols: " << nums << endl; //виведення повідомлення та рядка
			removed = true; //булева змінна - правда
			break; //вихід
		case 2: //якщо вибір 2
			if (removed) //булева змінна - правда
			{
				convertation(); //виклик функції
				cout << "Numbers: "; //виведення повідомлення
				for (int i = 0; numbers[i] != '\0'; i++) //доки коефіцієнт 0, число не є новим рядком, коефіцієнт збільшується
				{
					cout << numbers[i] << " "; //виведення чисел
				}
				cout << endl; //новий рядок
				cout << "Operators: "; //виведення повідомлення
				for (int i = 0; operators[i] != '\0'; i++) //доки коефіцієнт 0, не новий рядок, коефіцієнт збільшується
				{
					cout << operators[i] << " "; //виведення операторів
				}
				cout << endl; //новий рядок
			}
			else //інакше
			{
				cout << "All alphabetic characters have not been removed from the string" << endl; //виведення повідомлення
			}
			break; //вихід
		case 3: //якщо вибір 3
			if (removed) //булева змінна - правда
			{
				operations();//виклик функції
			}
			else //інакше
			{
				cout << "All alphabetic characters have not been removed from the string" << endl; //виведення повідомлення
			}
			break; //вихід
		case 4: //якщо вибір 4
			cout << "Exiting the program. Goodbye!" << endl; //виведення повідомлення
			return;  //завершення виконання функції choice і програми
			break; //вихід
		default: //якщо вибір не 1-4
			cout << "Invalid choice! Please try again." << endl; //виведення повідомлення
		}
	}while (userChoice != 4);
}
// =========== основна функція ===========
int main()
{
	identification(); //виклик функції ідентифікації
	input(); //виклик функції введення
	menu(); //виклик функції меню
	system("pause"); //пауза системи
}

Завдання 2
//Увести текст з n рядків з малих латинських літер. 
//Необхідно стиснути текст, замінивши послідовності символів тексту одною великою латинською буквою. 
//Для стиснення тексту ввести з клавіатури шифр у вигляді <велика латинська буква>< послідовність малих латинських літер>. 
//Різним замінюваним послідовностям символів можуть відповідати однакові великі латинські букви. 
//Якщо в тексті зустрічаються великі латинські літери, то перед стисненням тексту перевести їх у нижній регістр.
//Необхідно стиснути текст так, щоб його довжина була мінімальна.
#include <iostream>  //бібліотека введення-виведення
#include <string.h>  // бібліотека для роботи з рядками
#include <ctype.h>   // бібліотека для перевірки типів символів
using namespace std;
const int maxLength = 100; //максимальна довжина рядка
const int maxCipher = 10; //максимальна кількість шифрів
char lines[10][maxLength]; //масив рядків для введення тексту
int number; //кількість рядків
char cipherLetters[maxCipher]; //масив літер для шифру
char cipherSequences[maxCipher][maxLength]; //масив послідовностей символів шифру
int cipherCount = 0; //лічильник кількості шифрів
// ========== ідентифікація умови та автора ==========
void identification()
{
	cout << "Student Olha Yezerska, gr SE-12 lab9 var4" << endl;
	cout << "Enter text with n lines of lowercase Latin letters." << endl;
	cout << "It is necessary to compress the text by replacing the sequences of text characters with one uppercase Latin letter." << endl;
	cout << "To compress the text, enter the cipher in the form of <uppercase Latin letter>< sequence of lowercase Latin letters> from the keyboard." << endl;
	cout << "Different substitutable sequences of characters can correspond to the same uppercase Latin letters." << endl;
	cout << "If there are capital Latin letters in the text, before compressing the text, convert them to lower case.";
	cout << "It is necessary to compress the text so that its length is minimal" << endl;
	cout << "========================================================================" << endl;
}
// ========== перевірка введеного рядка ==========
void checkInput(const char* text, bool& validInput)
{
	validInput = true; //булева змінна правда
	if (text[0] == '\0') //якщо перший символ рядка є порожнім рядком
	{
		cout << "Error: The line cannot be empty." << endl; //виведення повідомлення
		validInput = false; //булева змінна брехня
		return; //завершення функції
	}
	for (int i = 0; text[i] != '\0'; ++i) //доки коефіцієнт є нулем, символ не новий рядок, коефіцієнт збільшується
	{
		if ((text[i] < 'a' || text[i] > 'z') && (text[i] < 'A' || text[i] > 'Z')) //якщо символ не латинський
		{
			cout << "Error: The line must contain only lowercase Latin letters." << endl; //виведення повідомлення
			validInput = false; //булева змінна брехня
			break; //завершення циклу
		}
	}
}
// ========== перевірка введення (числа) ==========
int check(int mValue, int nValue)
{
	int value; //ініціалізація змінної
	char input[100]; //символьний масив для зберігання введення
	bool isValidInput = false; //булева змінна брехня
	while (!isValidInput) //доки цикл справджується
	{
		cin.getline(input, 100); //зчитування рядка і збереження у обмеженому масиві
		if (strlen(input) == 0)  //якщо довжина рядка є нулем
		{
			cout << "Input cannot be empty. Try again: "; //виведення повідомлення
			continue; //наступна ітерація циклу
		}
		bool isNumber = true; //булнва зміннна правда
		for (int i = 0; i < strlen(input); i++) //доки коефіцієнт не нуль, менше довжини рядка і збільшується
		{
			if (!isdigit(input[i])) //якщо елемент не є числом
			{
				isNumber = false; //булева змінна брехня
				break; //вихід з циклу
			}
		}
		if (!isNumber) //якщо є нецифрові символи
		{
			cout << "Invalid input. Try again: "; //виведення повідомлення
			continue; //наступна ітерація циклу
		}
		value = atoi(input); //конвертація рядка у ціле число і збереження
		if (value < mValue || value > nValue) //якщо введення виходить за межі мінімального і максимального
		{
			cout << "Invalid input. Try again: "; //виведення повідомлення
			continue; //наступна ітерація
		}
		else //інакше
		{
			isValidInput = true; //зміна на правду
		}
	}
	return value; //повернення значення
}
// ========== введення кількості рядків ==========
void input()
{
	cout << "Enter the number of your lines: "; //виведення повідомлення
	number = check(1, 10); //перевірка через функцію
	cin.ignore(numeric_limits<streamsize>::max(), '\n'); //очищення буферу введення
	for (int i = 0; i < number; i++) //доки коефіцієнт нуль, менше введеного числа і збільшується
	{
        bool validInput = false; //булева змінна брехня
        while (!validInput) //доки введення коректне
		{
            cout << "Enter line " << (i + 1) << ": "; //виведення повідомлення та номеру рядка
			cin.getline(lines[i], maxLength); //зчитування рядка і збереження у обмеженому масиві
			checkInput(lines[i], validInput); //перевірка через функцію
        }
    }
}
// ========== переведення у нижній регістр ==========
void toLowerCase(char* text)
{
	for (int i = 0; text[i] != '\0'; i++) //доки коефіцієнт нуль, символ не новий рядок, коефіцієнт збільшується
	{
		if (text[i] >= 'A' && text[i] <= 'Z') //якщо символ є великою латинською літерою
		{
			text[i] = tolower(text[i]); //переведення у малу
		}
	}
}
// ========== виведення переведеного рядка ==========
void printTolower()
{
	for (int i = 0; i < number; i++) //доки коефіцієнт нуль, менше введеного числа і збільшується
	{
		toLowerCase(lines[i]); //виклик функції
	}
	cout << "String in lowercase: " << endl; //виведення повідомлення
	for (int i = 0; i < number; i++) //доки коефіцієнт нуль, менше введеного числа і збільшується
	{
		cout << lines[i] << endl; //виведення рядка
	}
}
// ========== перевірка введеного шифру ==========
bool checkInputCipher(char letter, const char* sequence)
{
	if (strlen(sequence) == 0 ) //якщо рядок пустий
	{
		cout << "Invalid input. Try again." << endl; //виведення повідомлення
		return false; //булева змінна брехня
	}
	if (!(letter >= 'A' && letter <= 'Z')) //якщо немає першого символу великої літери
	{
		cout << "Invalid input. Try again." << endl; //виведення повідомлення
		return false; //булева змінна брехня
	}
	for (int j = 0; sequence[j] != '\0'; j++) //доки коефіцієнт нуль, символ не є новим рядком, коефіцієнт збільшується
	{
		if (!(sequence[j] >= 'a' && sequence[j] <= 'z')) //якщо символ масиву не є маленькою латинською літерою
		{
			cout << "Invalid input. Try again." << endl; //виведення повідомлення
			return false; //булева змінна брехня
		}
	}
	return true; //повернення значення
}
// ========== введення шифру
void inputCipher()
{
	cout << "Enter cipher, one pair at a time." << endl; //виведення повідомлення
	cout << "Enter '0' to stop inputting the cipher." << endl; //виведення повідомлення
	int i = 0; //ініціалізація індексу нулем
	char letter; //змінна для зберігання великої літери
	char sequence[maxLength]; //змінна для зберігання рядка з малими літерами
	do //доки цикл справджується
	{
		cout << "Enter cipher pair (e.g. A abc): "; //виведення повідомлення
		cin >> letter; //внесення великої літери
		if (letter == '0') //якщо літера нуль
		{
			break; //вихід з циклу
		}
		cin.ignore(); //очищення вхідного буферу
		cin.getline(sequence, maxLength); //зчитування рядка і збереження у обмеженому масиві
		if (checkInputCipher(letter, sequence)) //якщо викликана функція повертає правду
		{
			cipherLetters[i] = letter; //збереження великої літери у масиві
			int j = 0; //ініціалізація індексу нулем
			while (sequence[j] != '\0' && j < maxLength - 1) //док символ не є новим рядком і менше максимальної довжини -1
			{
				cipherSequences[i][j] = sequence[j]; //копіювання символу у постійний масив
				j++; //перехід до наступного елементу
			}
			cipherSequences[i][j] = '\0'; //додавання кінцевого символу до рядку
			cipherCount++; //збільшення кількості введених пар
			i++; //перехід до наступного індексу
		}
	} while (letter != 0);
}
// ========== перевірка можливості закодувати рядок
void isSequenceEncodable(const char* text)
{
	for (int i = 0; text[i] != '\0';) //доки коефіцієнт є нулем, символ не новий рядок,
	{
		bool found = false; //булева змінна брехня
		for (int j = 0; j < cipherCount; j++) //доки коефіцієнт є нулем, менше кількості пар і збільшується
		{
			int seqLength = strlen(cipherSequences[j]); //ініціалізація довини
			if (strncmp(text + i, cipherSequences[j], seqLength) == 0) //якщо поточна частина рядка збігається з поточною послідовністю масиву
			{
				found = true; //булева змінна правда
				i += seqLength; //збільшення індексу на довжину послідовності
				break; //вихід з циклу
			}
		}
		if (!found) //якщо не знайдено послідовності
		{
			cout << "Compression not possible due to missing encoding." << endl; //виведення повідомлення
			system("pause"); //пауза системи
		}
	}
}
// ========== шифрування і стиснення тексту
void compressText(char* text)
{
	isSequenceEncodable(text); //виклик функції перевірки закодованості
	string result = ""; //створення рядка для зберігання результату
	int length = strlen(text); //ініціалізація довжини рядка
	for (int i = 0; i < length;) //доки коефіцієнт нуль, менше довжини 
	{
		bool found = false; //булева змінна брехня
		for (int j = 0; j < maxCipher; j++) //доки коефіцієнт нуль, менше максимальних шифрів і збільшується
		{
			int seqLength = strlen(cipherSequences[j]); //ініціалізація довжини поточної послідовності
			if (i + seqLength <= length && strncmp(text + i, cipherSequences[j], seqLength) == 0) //якщо поточна частина рядка збігається з поточною послідовністю
			{
				result += cipherLetters[j]; //додавання символу до результату
				i += seqLength; //збільшення на довжину послідовності
				found = true; //булева змінна правда
				break; //вихід з циклу
			}
		}
		if (!found) //якщо не знайдено
		{
			result += text[i]; //додавання до результату без змін
			i++; //збільшення індексу
		}
	}
	int j = 0; //ініціалізація індексу нулем
	for (char ch : result) //проходження по всіх елементах 
	{
		text[j++] = ch; //копіювання до масиву
	}
	text[j] = '\0'; //додавання кінцевого символу до рядку
}
// ========== виведення зашифрованого (стиснутого) рядка ==========
void printCompressed()
{
	for (int i = 0; i < number; i++) //доки коефіцієнт є нулем, менше кількості рядків і збільшується
	{
		compressText(lines[i]); //виклик функції стиснення
		cout << "Compressed line " << (i + 1) << ": " << lines[i] << endl; //виведення повідомлення, номеру рядка і самого рядка
	}
}
// ========== основна функція ==========
int main()
{
	identification(); //виклик функції ідентифікації
	input(); //виклик функції введення
	printTolower(); //виклик функції виведення переведоного рядка
	inputCipher(); //виклик функції введення шифру
	printCompressed(); //виклик функції виведення стиснутого рядка
	system("pause"); //пауза системи
}
